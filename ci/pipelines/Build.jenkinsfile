def channel = "testing"
def version = "0.0.0"
def profile = "vs2022.conanprofile"
def archs = ['x86', 'x86_64']
def configs = ['Debug', 'Release']

library identifier: "jenkins-pipeline-utils@1.0.10",
		retriever: modernSCM([
			$class: "GitSCMSource",
			remote: "https://bitbucket.org/Systelab/jenkins-pipeline-utils.git",
			credentialsId: "BitbucketWerfen"
		])
   
pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		string(	name: 'tag',
				description: 'Version to build (must match the version of the tag that will be checked out), leave blank for checkout of current branch',
				defaultValue: '',
				trim: true)

		booleanParam( name: 'stable',
					  description: 'Show if generated library should be uploaded as stable or testing',
					  defaultValue: false )
		
		booleanParam( name: 'uploadPackage',
					  description: 'Whether or not to upload conan package',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
		stage('Checkout')
		{
			steps
			{
				cleanupWorkspace()
				script 
				{
					if (params.tag == '')
					{
						checkoutFromGIT()
					}
					else
					{
						version = params.tag
						checkoutFromGIT(scm.userRemoteConfigs[0].url, "v${version}", true)
					}
					channel = params.stable ? "stable" : "testing"
				}
			}
		}
		
		stage('Build')
		{	
			steps
			{
				script
				{
					archs.each
					{ arch ->
						configs.each
						{ config ->
							stage("Build ${config}|${arch}")
							{
								def buildFolder = "build/${config}-${arch}"
								bat "conan install . --install-folder ${buildFolder} --profile=${profile} -s arch=${arch} -s build_type=${config}"
								bat "conan build . --build-folder ${buildFolder}"
								bat "conan export-pkg . RapidJSONAdapter/${version}@systelab/${channel} --build-folder ${buildFolder} --force"
								dir ("${buildFolder}/bin/${config}/")
								{
									bat "RapidJSONAdapterTest.exe --gtest_output=xml:RapidJSONAdapterTest.xml"
								}
							}
						}
					}
				}
			}
		}

		stage('Test Packages')
		{
			steps
			{
				script
				{
					archs.each
					{ arch ->
						configs.each
						{ config ->
							def buildFolder = "build/${config}-${arch}"
							bat "conan test test_package/conanfile.py RapidJSONAdapter/	${version}@systelab/${channel} --profile=${profile} -s arch=${arch} -s build_type=${config}"
						}
					}
				}
			}
		}

		stage('Deploy')
		{
			when
			{
				expression { params.uploadPackage }
			}
			steps
			{
				script
				{
					bat "conan upload RapidJSONAdapter/${version}@systelab/${channel} --all -r systelab-conan-local --force"
				}
			}
		}
	}
	
	post
	{
		always
		{
			junit allowEmptyResults: true, testResults: "build*/RapidJSONAdapterTest.xml"
			script
			{
				currentBuild.description = "${version}/${channel}"
			}
			cleanupWorkspace()
		}
	}
}